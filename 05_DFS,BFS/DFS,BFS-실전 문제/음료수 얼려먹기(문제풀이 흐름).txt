'''
현재 좌표에서 상 우 하 좌 붙어있는지 검사 하지만.
도중에 범위를 벗어나지 않는 상태에서 구멍이 뚤려있고, 방문하지 않은경우
방문처리를 하고 , 함수 재귀호출을 한다.

'''
4 5
00110
00011
11111
00000
입력 하였다고 하였을때 아래는 위의 문제 풀이 데이터 흐름을 설명하겠다.

[ 0, 0 ]   --> 특정 노드                                                                    [ 0,1 ]  --> 특정 노드    
1.  -1, 0 (범위 무시)                                                                       2.  -1, 1 (범위 무시)
    <0 , 1> [ 조건에 부합 ]하여 방문처리를 하고 재귀함수 호출.                                    0,2  이미 방문하였스니 (무시)
                                                                                               < 1 ,1 >  [ 조건에 부합 ] 하여 방문처리를 하고 재귀함수 호출.
-------------------------------------------------------------------------------------------------------------------------------------
[ 1,1]    --> 특정 노드                                                                     [ 1,2] --> 특정 노드    
3. 0,0 - 이미 방문하였스니 (무시)                                                            4.  0,2 이미 방문하였스니 (무시)
   <1,2> [ 조건에 부합 ]하여 방문처리를 하고 재귀함수 호출.                                        1,3 이미 방문하였스니 (무시)
                                                                                                2,2 이미 방문하였스니 (무시)
                                                                                                1,1 이미 방문하였스니 (무시)
                                                                                                -->이럴경우 다시 "3단계로" 돌아가 마져 '하', '좌' 검사 수행
------------------------------------------------------------------------------------------------------------------------------------------------
[1,1]      --> 특정 노드                                                                   [0,1]   --> 특정 노드        
5. 3단계에서 아까 상, 우를 수행하였으니 하, 좌 를 수행한다.                                  6. 2단계에서  상,우, 하 까지 검사했으니 '좌' 검사
   2,1  이미 방문하였스니 (무시)                                                               0,0   이미 방문하였스니 (무시)
   1,0  [ 조건에 부합 ]하여 방문처리를 하고 재귀함수 호출.                                      -->이럴경우 다시 "1단계로" 돌아가 방향 검사 수행
 -->이럴경우 다시 "2단계로" 돌아가 방향 검사 수행

여기까지 현재 [0],[0] 좌표에서 연결된 노드를 리스트 형태로 나열하자면 (아래와 같다.)
[0][0] , [0][1], [1][1], [1][2] ,[1][0]
------------------------------------------------------------------------------------------------------------------------------------------------
7. 1단계에서 상, 우를 수행하였으니 하, 좌 를 수행한다.
    1,0    이미 방문하였스니 (무시)    
    0, -1  (범위 무시)

여기까지 현재 0,0에서 연결된 노드를 리스트 형태로 나열하자면
[0][0] , [0][1], [1][1], [1][2] ,[1][0]   ----> 연결된 노드끼리 [ 한개 ]의 얼음덩이가 만들어 짐.

------------------------------------------------------------------------------------------------------------------------------------------------
< 다음으로 다시 > 아래 부분 코드로 가서
[0],[0]은 수행했으니 [0],[1] 부터 다시 if문에 조건에 부합하는지 검사.
부합하면 count증가하고 방문처리후, dfs 함수 호출 한다.
 --> 이런식으로 맵 좌표를 [ 전부 반복 검사하여 ] 몇개의 얼음덩이가 만들어 내는지 알아내는 문제.
 
for i in range(n):
    for j in range(m):
        if graph[i][j] == 0 and visited[i][j] == False:
            count += 1
            visited[i][j] = True #0,0 인덱스는 바로 방문 처리.
            dfs(graph, i, j, visited)
