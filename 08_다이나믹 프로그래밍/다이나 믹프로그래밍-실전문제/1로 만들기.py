"""
(실전 문제) 1로 만들기

# 정수 X가 주어질 때 [ 정수 X에 사용할 수 있는 연산 ]은 ' 다음과 같이 4가지. '
  ⓐ X가 5로 나누어떨어지면, 5로 나눈다.
  ⓑ X가 3으로 나누어떨어지면, 3으로 나눈다.
  ⓒ X가 2로 나누어떨어지면, 2로 나눈다.
  ⓓ X에서 1을 뺀다

- 정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 1을 만들려고 한다.
  연산을 사용하는 횟수의 최솟값을 출력하시오.
  
예를 들어 [ 정수가 26이면 ] 다음과 같이 계산해서 [ 3번의 연산이 최솟값 ]이다.
1. 26 - 1 = 25 (d)
2. 25 / 5 = 5  (a)
3. 5 / 5  = 1  (a)
------------------------------------------------------------------------------
[ 입력 조건 ]

- [ 첫째 줄 ]에 정수 X가 주어진다. (1 <= N <= 30,000)  

[ 출력 조건 ]
- 첫째 줄에 [ 정수의 연산을 ] 하는 횟수의 [ ** 최솟값을 출력 ** ]한다.

[ 입력 ]                     [ 출력 ]
  26                             3
  
※ dp 테이블을 특정 크기만큼 만들어주고, 점화식에 맞게 하나씩 채워주면 된다.
   즉, 점화식을 찾는게 dp에서 가장큰 핵심이라고 할 수 있다.
"""

# 정수 X를 입력 받기
x = int(input())

# 앞서 [ 계산된 결과를 저장 ]하기 위한 DP 테이블 초기화
# 1 같은경우는 애초에 [ 그 자체로 1 이기 때문에 ] --> ' 1로 만드는 연산 '이 필요하지 않아
# 0 으로 초기화 --> 즉, 첫 번째는 0이다.
d = [0] * 30001

# 다이나믹 프로그래밍(Dynamic Programming) 진행( 보텀업 )
# 2부터 [ ** 상향식 ** ]으로 반복문을 이용해서 
# [ 모든 특정 i를 ] 1로 만들기위한 [ 최소 연산의 횟수 ]를 구한다.
for i in range(2, x + 1): 
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i - 1] + 1  # 점화식 끝에 1을 더해주는 이유는 [ 함수의 호출 횟수 ]를 구해야 하기 때문.
    print("현재 "+str(i)+"에 대한 연산 횟수", end =' ' )
    print(d[i], sep='\n')
    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)
        print(str(i) ,end =' ')
        print(d[i])
    # 현재의 수가 3으로 나누어 떨어지는 경우
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1) # 2로 나눈 몫과 3으로 나눈 몫에 대한 값중 최소값을 저장.
        print(str(i),end =' ')
        print(d[i])
    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)
        print(str(i),end =' ')
        print(d[i])
        
print("["+str(x) + "]를 1로 만드는 최소 연산의 횟수 값:" + str(d[x]))
    



    

