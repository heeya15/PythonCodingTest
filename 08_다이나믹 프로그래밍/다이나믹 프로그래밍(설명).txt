< 다이나믹 프로그래밍 > p, 208
[ 중복되는 연산을 줄이자  ]
- 컴퓨터는 [ 연산 속도에 한계가 있고, 메모리 공간을 사용할 수 있는 데이터의 개수도 한정적 ]이라는 점이 많은 제약을 발생시킨다.
- 그래서, 우리는 " 연산 속도와 메모리 공간을 최대한으로 활용 "할 수 있는 [ 효율적인 알고리즘을 작성 ]해야 한다.	

- 어떤 문제는 " 메모리 공간을 ** 약간 더 사용 ** "하면 [ 연산 속도를 비약적으로 증가시킬 수 있는 방법 ]이 있다.
  대표적인 방법이 바로 --> [ 다이나믹 프로그래밍 기법 ]으로 (동적 계획법) 이라고 표현하기도 한다.

< 설명 순서 >
- 먼저 다이나믹 프로그래밍의 " 기본적인 아이디어를 소개 "한 뒤
- 다이나믹 프로그래밍의 " 2가지 방식( 탑다운과 보텀업)을 설명 "할 것.
- 특히 다이나믹 프로그래밍을 위해 자주 사용되는 " 메모이제이션 기법 "까지 소개.


< 다이나믹 프로그래밍과 동적할당의 다이나믹은 [ 같은 의미일까 ]? >
  자료구조에서 동적 할당은 [ 프로그램 실행 중에 ] 프로그램 실행에 필요한 메모리를 할당하는 기법이다.
 [ 하지만 ] ' 다이나믹 프로그래밍 '에서 '다이나믹'은 이런 의미가 아니라는 것 정도만 기억!

- 다이나믹 프로그맹으로 해결할 수 있는 대표적인 예시로 [ 피보나치 수열 ]이 있다.
  피보나치 수열은 [ 이전 두항의 합 ]을 " 현재의 항으로 설정 "하는 특징이 있는 수열
  
- 수학자들은 " 점화식을 " 사용해 [ 수열의 항이 이어지는 형태를 간결 ]하게 표현.
  [ 점화식이란 ] 인접한 항들 사이의 [ 관계식 ]을 의미.

- [ 프로그래밍 ]에서는 " 이러한 수열 "을 [ 배열 ]이나 [ 리스트 ]로 표현할 수 있다.
  [ 수열 자체가 ] " [ 여러 개의 수가 규칙에 따라 ]서 [ 배열된 형태를 ] 의미하는 것이디 때문.


p, 215
1. [ 재귀 함수를 이용 ]하여 다이나믹 프로그래밍 소스코드를 작성하는 방법을
   [ 큰 문제를 해결하기 위해 ] < 작은 문제를 호출 >한다고 하여 --> " 탑다운(Top-down) 방식 "이라고 말한다.

2. 반면에 단순히 [ 반복문을 이용 ]하여 소스코드를 작성하는 경우
  < 작은 문제부터 차근차근 답을 도출 >한다고 하여 --> " 보텀업(Bottom-Up) 방식 "이라고 말한다.

- [ 보텀업 방식 ]에서 사용되는 결과 저장용 리스트는 -->  'DP 테이블'이라고 부르며,
- 메모이제이션은 [ 탑다운 방식 ]에 국한되어 사용되는 표현 
----------------------------------------------------------------------------------------------------------------------------------
P, 216

특정한 문제를 [ 완전 탐색 알고리즘 ]으로 접근했을 때 " 시간이 매우 오래 걸리면 "
다이나믹 프로그래밍을 적용할 수 있는지 해결하고자 하는 " 부분 문제 " 들의 [ 중복 여부를 확인 ]해보자. 

1. 일단 재귀 함수로 비효율적인 프로그램을 작성한 뒤에 
  (탑다운) 작은 문제에 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 
  즉 메모이제이션을 적용할 수 있으면 코드를 개선하는 방법도 좋은 아이디어이다.

- 가능하다면 재귀 함수를 이용하는 탑다운 방식보다는 [ 보텀업 방식으로 구현하는 것을 권장 ]한다.
