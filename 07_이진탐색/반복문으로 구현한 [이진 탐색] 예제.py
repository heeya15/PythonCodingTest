
"""
< 
< 이진 탐색의 특징 >
- 데이터가 무작위일 때는 사용 x
  [ 이미 정렬되어 있다면 매우 빠르게 ] 데이터를 찾을 수 있다는 특징.
- 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 특징이 있다.

- 이진 탐색은 [ 위치를 나타내는 변수 3개를 사용 ]
  탐색하고자 하는 범위의 < 시작점, 끝점, 그리고 중간점 >
- [ 찾으려는 데이터 ]와 [ 중간점 위치에 있는 데이터를 반복적 ]으로 " 비교해서 "
  " 원하는 데이터를 찾는 게 이진 탐색 과정 ".

- 이진 탐색은 ★ 한 번 확인할 때마다 ★ 확인하는 원소의 개수가 [ 절반씩 줄어든다는 점 ]
  에서 시간 복잡도가 O(logN) 이다.
  [ 절반씩 데이터를 줄어들도록 만든다는 점 ]은 앞서 다룬 " 퀵 정렬 "과 공통점이 있다.

< 이진 탐색을 구현하는 방법 2가지 >
1. 재귀 함수를 이용
2. 단순하게 반복문을 이용하는 방법.

< 문제 > 
- [ 원소의 개수 ]와 [ 찾고자하는 값을 입력 ]받고 
- [ 찾고자 하는 데이터 인덱스 위치 값을 출력 ]하시오.
[ 입력 ]                             [ 출력 ]
10 7

1 3 5 7 9 11 13 15 17 19                4
--------------------------------------------------------

10 7 

1 3 5 6 9 11 13 15 17 19               원소가 존재하지 않습니다.

★ [ 탐색 범위가 ] 2,000만을 넘어가면 [ 이진 탐색으로 ] 문제에 접근해 보길 권함
- 처리해야 할 [ 데이터의 개수 ]나 [ 값이 ] 1,000만 단위 이상으로 넘어가면 [ 이진 탐색 ]과 같이
 <  O(logN)의 속도를 내야 하는 알고리즘을 떠올려야 > 문제를 풀 수 있는 경우가 많다는 점을 기억.
"""
# 7-3.py 반복문으로 구현한 [ 이진 탐색 ] 소스코드

# 이진 탐색 소스코드 구현 (반복문)
def binary_search(array, target, start, end):
    while start <= end:
        mid = (start + end) // 2
        # 찾은 경우 중간점 인덱스 반환
        if array[mid] == target:
            return mid
        
        # [ 중간점의 값보다 ] 찾고자 하는 값이 작은 경우 '왼쪽' 확인
        elif array[mid] > target:
            end = mid - 1 #[ 중간점 이 후의 값은 ] 필요 없으니, '끝점'을 [ 중간점 -1 로 옮긴다 ].
            
        # 중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인
        else:
            start = mid + 1
    return None  # 아무것도 찾지 않는다면 None을 반환.

# n(원소의 개수)과 target(찾고자 하는 값)을 입력 받기
n, target = list(map(int, input().split()))
# 전체 원소 입력 받기
array = list(map(int, input().split()))

# 이진 탐색 수행 결과 출력
result = binary_search(array, target, 0, n - 1)
if result == None:
    print("원소가 존재하지 않습니다.")
else:
    print(result + 1)


