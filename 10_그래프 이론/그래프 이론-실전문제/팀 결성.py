"""
(실전 문제) 팀 결성 p, 298

- 학교에서 학생들에게 [ 0번부터 N번까지의 번호를 부여 ]함.
  '처음에는' 모든 학생이 [ 서로 다른 팀으로 구분 ]되어, [ 총 N+1 개의 팀 ]이 존재
  
- 이때 선생님은 '팀 합치기'연산과 '같은 팀 여부 확인'연산을 사용할 수 있다.

1. '팀 합치기' 연산은 두 팀을 합치는 연산
2. '같은 팀 여부 확인' 연산은 [ 특정한 두 학생이 ] '같은 팀에 속하는지를 확인'하는 연산

- 선생님이 M개의 연산을 수행할 수 있을 때, '같은 팀 여부 확인' 연산에 대한 
  연산 결과를 출력하는 프로그램을 작성하시오.
------------------------------------------------------------------------------
[ 입력 조건 ]

- 첫째 줄에 "전체 회사의 개수 [ N ]과" "경로의 개수 [ M ]이" 공백으로 구분되어 차례대로 주어진다.
  (1 <= N, M <=100)

- 둘째 줄부터 [ M+1번째 줄 ]에는 [ 연결된 두 회사의 번호 ]가 공백으로 구분.

- [ M+2 번째 줄 ]에는 X와 K가 공백으로 구분되어 차례대로 주어짐. (1 <= K <= 100)

[ 출력 조건 ]

- 첫째 줄에 [ 방문 판매원 A가 ] "K번 회사를 거쳐" [ X번 회사로 가는 ] '최소 이동 시간'을 출력한다.

- 만약 X번 회사에 도달할 수 없다면 -1 을 출력한다.


[ 입력 ]                     [ 출력 ]
5 7
1 2
1 3
1 4                            3
2 4
3 4
3 5
4 5  //여기까지 [ 연결된 두 회사 ]의 번호.
4 5                            

------------------------------------------------------------------------------
(아래입력 해석 )
( 노드는: 4개, 간선의 수는 : 2개) , '4'를 거쳐 3으로 가는 최소 이동시간을 구해라.

4 2                            -1
1 3
2 4
3 4  (X K)    

( 문제 아이디어 )
- 전형적인 최단 거리 문제이므로 최단 거리 알고리즘을 이용하여 해결

- N의 크기가 최대 100이므로 플로이드 워셜 알고리즘을 이용해도 효율적으로 해결 가능.

- '모든 지점'에서 [ 다른 모든 노드로 ] 가기 위한 "최단 거리"를 구하고(알고리즘을 수행 ),
  ([ 1번 노드 ]에서 K까지의 최단 거리 + [ K에서 ] X까지의 최단거리)를 계산하여 출력하면 된다.
"""

# 특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
    # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

# 두 원소가 속한 집합을 합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

n, m = map(int, input().split())
parent = [0] * (n + 1) # 부모 테이블 초기화

# 부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(0, n + 1):
    parent[i] = i

# 각 연산을 하나씩 확인
for i in range(m):
    oper, a, b = map(int, input().split())
    # 합치합(Union) 연산인 경우
    if oper == 0:
        union_parent(parent, a, b)
    # 찾기(Find) 연산인 경우
    elif oper == 1:
        if find_parent(parent, a) == find_parent(parent, b):
            print('YES')
        else:
            print('NO')
