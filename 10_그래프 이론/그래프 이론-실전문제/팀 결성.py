"""
(실전 문제) 팀 결성 p, 298

- 학교에서 학생들에게 [ 0번부터 N번까지의 번호를 부여 ]함.
  '처음에는' 모든 학생이 [ 서로 다른 팀으로 구분 ]되어, [ 총 N+1 개의 팀 ]이 존재
  
- 이때 선생님은 '팀 합치기'연산과 '같은 팀 여부 확인'연산을 사용할 수 있다.

1. '팀 합치기' 연산은 두 팀을 합치는 연산
2. '같은 팀 여부 확인' 연산은 [ 특정한 두 학생이 ] '같은 팀에 속하는지를 확인'하는 연산

- 선생님이 M개의 연산을 수행할 수 있을 때, '같은 팀 여부 확인' 연산에 대한 
  연산 결과를 출력하는 프로그램을 작성하시오.
------------------------------------------------------------------------------
[ 입력 조건 ]

- 첫째 줄에 N, M이 주어진다. 'M은' 입력으로 주어지는 [ 연산의 개수 ]이다. (1 <= N, M <= 100,000)

- 다음 [ M개의 줄 ]에는 각각의 연산이 주어진다.

- '팀 합치기' 연산은 '0 a b' 형태로 주어진다. 
  이는 [ a번 학생 ]이 속한 팀과 [ b번 학생이 속한 팀 ]을 '합친다(연결)'는 의미 

- '같은 팀 여부 확인' 연산은 1 a b 형태로 주어진다. 이는 [ a번 학생 ]과 [ b번 학생이 ] 
  같은 팀에 속해 있는지를 확인하는 연산.
  
- [ a와 b는 ] ' N 이하의 양의 정수 '이다.

[ 출력 조건 ]

- '같은 팀 여부 확인' 연산에 대하여 '한 줄에 하나씩' YES 혹은 NO로 결과를 출력한다.


[ 입력 ]                     [ 출력 ]
7 8
0 1 3 --> 1 3을 합침(연결)
1 1 7 --> 1 7을 같은 부모인지 확인
0 7 6
1 7 1                         NO
0 3 7                         NO
0 4 2                        YES
0 1 1
1 1 1


"""
# 책 정답 10-7.py (p, 299)
# 특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
    # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

# 두 원소가 속한 집합을 합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

n, m = map(int, input().split())
parent = [0] * (n + 1) # 부모 테이블 초기화

# 부모 테이블상에서, 부모를 [ 자기 자신으로 ] 초기화
for i in range(0, n + 1):
    parent[i] = i

# 각 연산을 '하나씩 확인'
for i in range(m):
    oper, a, b = map(int, input().split())
    # 합치합(Union) 연산인 경우
    if oper == 0:
        union_parent(parent, a, b)
    # 찾기(Find) 연산인 경우
    elif oper == 1:
        if find_parent(parent, a) == find_parent(parent, b):
            print('YES')
        else:
            print('NO')
