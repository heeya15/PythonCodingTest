"""
(위상 정렬) p, 290~ 291
- 정렬 알고리즘의 일종
- 순서가 정해져 있는 [ 일련의 작업을 ** 차례대로 수행 ** ]해야 할 때 사용.
- [ 방향 그래프의 모든 노드 ]를 '방향성에 거스르지 않도록' 순서대로 나열하는 것.
- 그래프상에 선후 관계가 있다면, 위상 정렬을 수행하여 모든 [ 선후 관계를 지키는 ] 전체 순서를 계산.

ex) 자료구조, 알고리즘, 고급 알고리즘 3개의 과목으로 구성
    '고급 알고리즘'의 [ 선수과목 ] 으로 <자료구조>와 <알고리즘>이 있다고 가정
    이 모든 과목을 수강하기 위해 '자료구조 -> 알고리즘 -> 고급 알고리즘' 순서로 강의를 수강해야 함.

- 위상 정렬 알고리즘을 자세히 살펴보기 전에, 먼저 [ 진입차수 ]를 알아야 한다.
  '진입 차수'란 [ 특정한 노드 ]로 '들어오는' [ 간선의 개수 ]
  따라서 위의 예시 '고급 알고리즘'의 '진입 차수'는 2개이다.
  ( 알고리즘 )
  1. '진입차수가 0인' 노드를 [큐]에 넣는다.
  
  2. [ 큐가 빌 때까지 ] 다음의 과정을 반복한다.
     (1). 큐에서 [ 원소를 꺼내 ] ' 해당 노드에서 출발하는 간선 '을 [ 그래프에서 제거 ]한다.
     (2). 새롭게 [ 진입차수가 0이 된 노드 ]를 '큐에 넣는다'.
  
"""
# 책 정답 10-6.py (p, 296 )
from collections import deque

# [ 노드의 개수 ]와 [ 간선(Union 연산)의 개수 ] 입력 받기
v, e = map(int, input().split())

# [ 모든 노드에 ] 대한 [ 진입차수는 0으로 초기화 ]
indegree = [0] * (v + 1)

# 각 노드에 연결된 [ 간선 정보를 담기 ] 위한 연결 리스트 초기화
graph = [[] for i in range(v + 1)]

# 방향 그래프의 [ 모든 간선 정보 ]를 입력 받기
for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b) # 정점 A에서 B로 이동 가능
    # [ 진입 차수 ]를 1 증가
    indegree[b] += 1

# [ 위상 정렬 ] 함수
def topology_sort():
    result = [] # 알고리즘 [ 수행 결과를 담을 ] 리스트
    q = deque() # 큐 기능을 위한 deque 라이브러리 사용

    # 처음 시작할 때는 [ 진입차수가 0인 노드 ]를 '큐에 삽입'
    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    # 큐가 '빌 때까지' 반복
    while q:
        # 큐에서 원소 꺼내기
        now = q.popleft()
        result.append(now)
        # [ 해당 원소와 ] 연결된 ' 노드들의 진입차수 '에서 '1 빼기'
        for i in graph[now]:
            indegree[i] -= 1
            # 새롭게 [ ** 진입차수 **가 '0이' 되는 노드를 ] '큐에 삽입'
            if indegree[i] == 0:
                q.append(i)

    # 위상 정렬을 수행한 [ 결과 출력 ]
    for i in result:
        print(i, end=' ')

topology_sort()