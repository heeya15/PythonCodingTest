cd C:\Users\choon\OneDrive\Desktop\PythonCodingTest\09_최단 경로
python "(9-1)간단한 다익스트라 알고리즘.py"
( 입력 예시 )
6 11
1
1 2 2
1 3 5
1 4 1
2 3 3
2 4 2
3 2 3
3 6 5
4 3 3
4 5 1
5 3 1
5 6 2

 (출력 예시 )
    0
    2
    3
    1
    2
    4

( 문제 풀이흐름 )

1. 노드개수, 간선의 개수, 출발노드 입력
   노드에 대한 정보를 담는 리스트, 방문 체크 리스트, 최단 거리 테이블(무한으로) 초기화. 
------------------------------------------------------------------------------------------------------------------

2. "각 노드"에 대한 "간선"정보 입력.
  ex)  graph[a].append((b, c))  --> [ a 번 노드 ]에서 [ b노드로 가는 비용 ]이 'c'

( 입력한 후 [ graph 리스트 ]에 아래와 같이 각 노드에 대한 간선(연결) 정보가  담겨져있음 )
[[], [(2, 2), (3, 5), (4, 1)], [(3, 3), (4, 2)], [(2, 3), (6, 5)], [(3, 3), (5, 1)], [(3, 1), (6, 2)], []]

-----------------------------------------------------------------------------------------------------------------

3. 옆에 코드 -->dijkstra(start) # 출발 노드를 인수로 넘겨줌. (다익스트라 알고리즘 수행)

-----------------------------------------------------------------------------------------------------------------

4. 시작(출발) 노드('1')에 대해서 초기화.
   - 시작 노드가 자기 자신한테 가는 비용은 '0' 이여서 
     ( 최단거리 테이블 1번노드에 대해 0으로 초기화) 그리고 방문 처리.

-----------------------------------------------------------------------------------------------------------------

5. 시작 노드에 대한 연결된 노드로 가는 비용을 [ 최단 거리테이블에 넣어줌 ].
- graph[start] (1번 노드에)  아래와 같이 해당하는 노드와, 비용 원소가 들어있음
  [(2, 2), (3, 5), (4, 1)] 

for j in graph[start]: 
       distance[j[0]] = j[1]  --> 이뜻은 [ 시작 노드의 ] 거리테이블 무한 비용을 '2', '5', '1' 로 초기화. 

- 한 마디로 [ 1번 노드 ]에서 '2번'노드로 가는 비용 '2'
                [ 1번 노드 ]에서 '3번'노드로 가는 비용 '3'
                [ 1번 노드 ]에서 '4번' 노드로 가는 비용 '1' 로 "최단 거리테이블을 갱신하겠다." 라는 의미.
( 아래는 위 과정을 거친 [ 최단 거리테이블(distance) ] 비용 값 상태)
[1000000000, 0, 2, 5, 1, 1000000000, 1000000000]
-----------------------------------------------------------------------------------------------------------------
6. 현재 [ 최단 거리가 가장 짧은 노드 ]를 꺼내서  방문 처리
    now = get_smallest_node() --> 해당 메소드에서 가장 최단 거리가 짧은 노드(인덱스) 반환.

( 아래는 해당 함수 코드 )
# " 방문하지 않은 노드 " 중에서, 가장 [ 최단 거리가 짧은 노드의 번호 ]를 반환     
def get_smallest_node():
    min_value = INF
    index = 0 # 가장 최단 거리가 짧은 노드(인덱스)
    for i in range(1, n + 1):  # 1~ 6까지 노드 범위 반복.
        if distance[i] < min_value and not visited[i]: -->min_value보다 작고, 방문하지 않는 노드이면.
            min_value = distance[i]    --> min_value의 값을 [ 최단 거리가 짧은 노드의 ] 비용으로 바꿈.
            index = i   # [ 최단 거리가 짧은 노드의 인덱스 ]를 index 변수에 값 설정
    return index
  
( 예시로 흐름 설명 )
 [ 현재  최단 거리테이블(distance) ] 비용 값 상태 ]
        0                 1 2  3  4      5                      6
--> [1000000000, 0, 2, 5, 1, 1000000000, 1000000000]

- 현재 최단거리 테이블 [ 노드 1,2,3,4 ] 안에 비용이 들어있는데, 위 반복문에의해
  [ 1번 노드가 ] 자기자신한테 가는 비용이여서 가장 작지만, 
  시작 노드를 초기화 할 때, [ 방문처리를 하여 ] 성립이 안된다.

- 따라서 [ 4번노드가  ] 비용이 '1' 이여서 min_value 변수에 값이 저장되고
  해당 노드 [ 인덱스 번호를 반환 ]시켜준다.   
-----------------------------------------------------------------------------------------------------------------
7. [ 시작 노드를 제외한 ] 전체 n-1개의 노드에 대해 반복하여 최단 거리 노드 구함  
    - 해당 인덱스 번호를 now 변수에 저장.
    - 그 후, 그 인덱스 노드('4')를 방문 처리.
for i in range(n - 1):
     now = get_smallest_node()  # 최단 거리가 짧은 노드 저장.
     visited[now] = True  # 방문 처리.
-----------------------------------------------------------------------------------------------------------------
8. 최단 거리가 짧은 노드의 [ 최단 거리테이블 비용과, 해당노드로 가는비용 을 더해준다)   
    # 현재 노드와 연결된 다른 노드를 확인
       for j in graph[now]:
            cost = distance[now] + j[1] # 거리가 짧은 노드(비용) + 해당노드로 가는 비용
( 예시 흐름)
[ 현재  최단 거리테이블(distance) ] 비용 값 상태 ]
        0                 1 2  3  4      5                      6
--> [1000000000, 0, 2, 5, 1, 1000000000, 1000000000]

(1). 우리는 현재 [ 4번 노드가 ] 거리가 짧은 노드로서 들고와서 [ 해당 '4'번노드에 연결된 간선정보 ]들을
      이용하여 비용을 구하고, 그 비용이 [ 현재 최단 거리테이블 비용보다 작을 경우 ] 갱신해준다.
< 4번 노드에 연결된 [ 노드 ]와 [ 간선 ]정보 >
ex) [(3, 3), (5, 1)] --> [ 4번 노드 ]에서 [ 3번노드 ]로 가는데 드는 비용 '3'이 든다.
- 즉, 현재 [ 출발 노드에서 ] [ 4번노드로 가는 비용 ]은 '1' 
       [ 4번 노드를 거쳐서 ] [ 3번 노드로 가는 비용 ] 은 '3'    -->  따라서  cost = 1 + 3 = 4라는 뜻이다. 
-----------------------------------------------------------------------------------------------------------------
9.  #[ 현재 노드를 거쳐서 ] < 다른 노드로 이동하는 거리 >가
     # 현재 [ 최단 거리테이블에 있는 거리의 비용 ]보다 [ 더 짧은 경우의 조건문 ]
     # ex) '3번 노드' 방문의 비용이 '5'인데 출발노드에서 [ 4번노드를 ** 거쳐서** ] 
     # '3번 노드 방문이 [ 더 작을경우 ] ' 짧은 비용으로 갱신 시키는 과정.
            if cost < distance[j[0]]:
                distance[j[0]] = cost # 짧은 비용을 최단 거리테이블에 갱신.
-----------------------------------------------------------------------------------------------------------------
10. 시작 노드에서 모든 노드로 가기 위한 최단 거리를 출력,
     즉, 도달할 수 있는경우 [ 노드 방문 거리] 출력, 도달할수 없을경우는 "INFINITY" 출력

# 모든 노드로 가기 위한 최단 거리를 
for i in range(1, n + 1):
    # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달할 수 있는 경우 [ 거리 ]를 출력
    else:
        print("[ 출발 노드 ]에서 "+ str([ i ]) +" 노드에 도달할수 있는 거리: " + str(distance[i]))