"""
(실전 문제) 미래 도시 p, 259
- 회사 : 노드,  도로 = 간선

- 연결된 2개의 회사는 양방향으로 이동이 가능하다.

- 목표: [ 1번 회사에서 출발 ]하여 'K번 회사를 방문한 뒤' [ X번 회사로 가는 것이 목표 ]다.


------------------------------------------------------------------------------
[ 입력 조건 ]

- 첫째 줄에 "전체 회사의 개수 [ N ]과" "경로의 개수 [ M ]이" 공백으로 구분되어 차례대로 주어진다.
  (1 <= N, M <=100)

- 둘째 줄부터 [ M+1번째 줄 ]에는 [ 연결된 두 회사의 번호 ]가 공백으로 구분.

- [ M+2 번째 줄 ]에는 X와 K가 공백으로 구분되어 차례대로 주어짐. (1 <= K <= 100)

[ 출력 조건 ]

- 첫째 줄에 [ 방문 판매원 A가 ] "K번 회사를 거쳐" [ X번 회사로 가는 ] '최소 이동 시간'을 출력한다.

- 만약 X번 회사에 도달할 수 없다면 -1 을 출력한다.


[ 입력 ]                     [ 출력 ]
5 7
1 2
1 3
1 4                            3
2 4
3 4
3 5
4 5  //여기까지 [ 연결된 두 회사 ]의 번호.
4 5                            

------------------------------------------------------------------------------
(아래입력 해석 )
( 노드는: 4개, 간선의 수는 : 2개) , '4'를 거쳐 3으로 가는 최소 이동시간을 구해라.

4 2                            -1
1 3
2 4
3 4  (X K)    

( 문제 아이디어 )
- 전형적인 최단 거리 문제이므로 최단 거리 알고리즘을 이용하여 해결

- N의 크기가 최대 100이므로 플로이드 워셜 알고리즘을 이용해도 효율적으로 해결 가능.

- '모든 지점'에서 [ 다른 모든 노드로 ] 가기 위한 "최단 거리"를 구하고(알고리즘을 수행 ),
  ([ 1번 노드 ]에서 K까지의 최단 거리 + [ K에서 ] X까지의 최단거리)를 계산하여 출력하면 된다.
   
"""
# 책 정답 9-4.py (p, 261 ) 
INF = int(1e9) # 무한을 의미하는 값으로 10억을 설정

# [ 노드 ]의 개수, [ 간선 ]의 개수를 입력받기
n, m = map(int, input().split())

# 2차원 리스트(그래프 표현)를 만들고, 모든 값을 무한으로 초기화
graph = [[INF] * (n + 1) for _ in range(n + 1)]

# 자기 자신에서 [ 자기 자신 ]으로 가는 비용은 0으로 초기화
for a in range(1, n + 1):
    for b in range(1, n + 1):
        if a == b:
            graph[a][b] = 0

# 각 간선에 대한 정보를 입력 받아, 그 값으로 초기화
for _ in range(m):
    # A와 B가 [ 서로에게 가는 비용 ]은 '1' 이라고 설정
    a, b = map(int, input().split())
    graph[a][b] = 1
    graph[b][a] = 1

# 거쳐 갈 노드 K와 최종 [ 목적지 노드 X ]를 입력받기
x, k = map(int, input().split())

# 점화식에 따라 플로이드 워셜 알고리즘을 수행
for k in range(1, n + 1):
    for a in range(1, n + 1):
        for b in range(1, n + 1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

# 수행된 결과를 출력( 이 문제의 핵심 아이디어 코드 부분.)
distance = graph[1][k] + graph[k][x] # 1번에서 'K를 거쳐' X로 가는 최단 거리를 구함.

# 도달할 수 없는 경우, -1을 출력
if distance >= INF:
    print("-1")
# 도달할 수 있다면, 최단 거리를 출력
else:
    print(distance)
