"""
p, 239~ 242
(개선된 다익스트라 알고리즘) --> 거리가 가장 짧은노드를 선형적으로 찾는 방법 x

- 여기서는 "힙(Heap)자료구조"를 사용
  "힙 자료구조"를 이용하게 되면 [ 특정 노드 까지의 ] "최단 거리"에 대한 정보를 [ 힙에 담아서 ] 
  처리하므로 출발 노드로부터 [ 가장 "거리가 짧은 노드"를 더욱 빠르게 찾을 수 ] 있다.

- [ 힙 자료구조 ]는 [ 우선순위 큐를 구현 ]하기 위하여 사용하는 자료구조 중 하나다.
  "우선순위 큐"는 [ 우선순위가 가장 높은 데이터를 가장 먼저 삭제 ]한다는 점이 특징.
  
- "우선순위 큐 라이브러리"에 [ 데이터의 묶음 ]을 넣으면, [ 첫 번째 원소를 기준 ]으로 우선순위를 결정
  데이터가 (가치, 물건)으로 구성된다면 '가치' 값이 [ 우선순위 값이 되는 것. ]
  
- 우선순위 큐를 구현할 때는 내부적으로 "최소 힙" or "최대 힙"을 이용
  최소 힙 : 값이 낮은 데이터가 먼저 삭제
  최대 힙 : 값이 큰 데이터가 먼저 삭제.
  
  < 파이썬 라이브러리에서는 기본적으로 [ 최소 힙 구조를 이용 ] >
  
- 다익스트라 최단 경로 알고리즘에서는 [ 비용이 적은 노드 ]를 "우선하여 방문"하므로 
  [ 최소 힙 구조 ]를 기반으로 하는 [ 파이썬의 우선순위 큐 라이브러리 ]를 [ 그대로 사용 ]하면 적합.

- 즉, "우선순위 큐"에 [ 거리가 짧은 순서대로 ], 왼쪽부터 나열하겠다.
  [ 최단 거리를 저장 ]하기 위한 1차원 리스트는 그대로 이용.
  [ 가장 가까운 노드를 저장 ]하기 위한 목적으로만 [ " 우선순위 큐를 " " 추가 "로 이용 ]
"""
# 책 정답 9-2.py (p, 248 ) 
import heapq # 우선순위 큐 라이브러리 사용.
import sys
input = sys.stdin.readline # 입력을 "빠르게 동작"하는 방법(입력되는 데이터 수가 많을경우).
INF = int(1e9) # "무한"을 의미하는 값으로 "10억을" 설정

# [ 노드 ]의 개수, [ 간선 ]의 개수를 입력받기
n, m = map(int, input().split())

# [ 시작 노드 번호( "출발" 노드 ) ]를 입력받기
start = int(input())

# " 각 노드에 연결 "되어 있는 [ 노드에 대한 정보를 담는 리스트 ]를 만들기
graph = [[] for i in range(n + 1)]

# "최단 거리 테이블"을 [ 모두 무한 ]으로 초기화
distance = [INF] * (n + 1)

# 모든 [ ** 간선 정보 ** ]를 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # [ a번 노드 ]에서 b번 노드로 가는 [ 비용이 'c'라는 의미 ]
    graph[a].append((b, c))

def dijkstra(start):
    q = []
    # heap에 값을 넣으려면 heappush 메서드를 사용한다. 
    # 첫 번째 인수는 heap으로 사용될 [ list가 들어가고 ] 두 번째 인수로는 [ 넣고자 하는 값 ]이 들어간다.
    # [ 시작 노드로 ] 가기 위한 [ 최단 경로는 0으로 설정 ]하여, [ 큐(q)리스트에 삽입 ]
    heapq.heappush(q, (0, start))
    distance[start] = 0  # [ 최단 거리 ]테이블 [출발노드] 거리값을 0으로 설정.
    
    while q: # 큐가 비어있지 않다면
        # 가장 [ 최단 거리가 짧은 노드 ]에 대한 [ 정보 꺼내기 ]
        dist, now = heapq.heappop(q)
        # 현재 노드가 이미 처리된 적이 있는 노드라면 무시
        if distance[now] < dist: 
            print(now,distance[now], dist)
            continue
        # 현재 노드와 연결된 다른 인접한 노드들을 확인
        for i in graph[now]:
            cost = dist + i[1]  # 추출한 노드의 거리 + 걸쳐서 해당노드로 가는 비용 
     #[ 현재 노드를 거쳐서 ] 다른 노드로 이동하는 거리가
     # 현재 [ 최단 거리테이블에 있는 거리의 비용 ]보다 [ 더 짧은 경우의 조건문 ]
     # ex) '3번 노드' 방문의 비용이 '5'인데 출발 노드에서 [ 4번노드를 ** 거쳐서 ** ] 
     # '3번 노드 방문이 더 작을경우 ' 짧은 비용으로 갱신 시키는 과정.
            if cost < distance[i[0]]:
                distance[i[0]] = cost # 짧은 비용을 최단 거리테이블에 갱신.
                heapq.heappush(q, (cost, i[0])) # 우선 순위 큐에, 갱신된 (최단 거리,노드) 튜플을 넣어줌.

# 다익스트라 알고리즘을 수행
dijkstra(start) # 출발 노드를 인수로 넘겨줌.

print(sep='\n' )
print("출력 ")

# 모든 노드로 가기 위한 최단 거리를 
for i in range(1, n + 1):
    # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달할 수 있는 경우 [ 거리 ]를 출력
    else:
        print("[ 출발 노드 ]에서 "+ str([ i ]) +" 노드에 도달할수 있는 거리: " + str(distance[i]))