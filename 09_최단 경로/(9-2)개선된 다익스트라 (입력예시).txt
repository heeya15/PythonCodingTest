cd C:\Users\choon\OneDrive\Desktop\PythonCodingTest\09_최단 경로
python "(9-2)개선된 다익스트라 알고리즘.py"
( 입력 예시 )
6 11
1
1 2 2
1 3 5
1 4 1
2 3 3
2 4 2
3 2 3
3 6 5
4 3 3
4 5 1
5 3 1
5 6 2

 (출력 예시 )
    0
    2
    3
    1
    2
    4

( 문제 풀이흐름 )

1. 노드개수, 간선의 개수, 출발 노드 입력
   노드에 대한 정보를 담는 리스트,  최단 거리 테이블(무한으로) 초기화. 
------------------------------------------------------------------------------------------------------------------

2. "각 노드"에 대한 "간선"정보 입력.
  ex)  graph[a].append((b, c))  --> [ a 번 노드 ]에서 [ b노드로 가는 비용 ]이 'c'

( 입력한 후 [ graph 리스트 ]에 아래와 같이 각 노드에 대한 간선(연결) 정보가  담겨져있음 )
[[], [(2, 2), (3, 5), (4, 1)], [(3, 3), (4, 2)], [(2, 3), (6, 5)], [(3, 3), (5, 1)], [(3, 1), (6, 2)], []]

-----------------------------------------------------------------------------------------------------------------

3. 옆에 코드 -->dijkstra(start) # 출발 노드를 인수로 넘겨줌. (다익스트라 알고리즘 수행)

-----------------------------------------------------------------------------------------------------------------

4. 시작(출발) 노드('1')에 대해서 초기화.
   - 시작 노드가 자기 자신한테 가는 비용은 '0' 이여서 
     ( 최단거리 테이블 1번노드에 대해 0으로 초기화) .
(해당 코드 )
    q = []   --> 우선 순위 큐 (리스트)로 사용될 변수를 초기화
    # heap에 값을 넣으려면 heappush 메서드를 사용한다. 
    # 첫 번째 인수는 heap으로 사용될 [ list가 들어가고 ] 두 번째 인수로는 [ 넣고자 하는 값 ]이 들어간다.
    # [ 시작 노드로 ] 가기 위한 [ 최단 경로는 0으로 설정 ]하여, [ 큐(q)리스트에 삽입 ]
    heapq.heappush(q, (0, start))   --> 처음에 우선순위 큐에 튜플 (0,1)을 넣어줌--> (거리, 노드)형태로.
    distance[start] = 0  # [ 최단 거리 ]테이블 [출발노드] 거리값을 0으로 설정.
-----------------------------------------------------------------------------------------------------------------

5. 우선순위 큐가 비어있지 않는경우 현재 가장 [ 최단 거리가 가장 짧은 노드 ]를 꺼내기
(코드)
    while q: # 큐가 비어있지 않다면
        print(q)
        # 가장 [ 최단 거리가 짧은 노드 ]에 대한 [ 정보 꺼내기 ]
        dist, now = heapq.heappop(q)
- 한 마디로 처음에 원소를 꺼내면 (0,1)이 꺼내져 나옴.
dist = 0(거리),  now = 1 (노드)
-----------------------------------------------------------------------------------------------------------------
6.  현재 노드가 [ 이미 처리된 적이 있는 노드 ]라면 무시
   - 큐에서 꺼내온 현재 노드(now)의 [ 최단 거리테이블 거리값 ]이, 
     현재 우선순위 큐의 [ 거리값보다 "작을" 경우 ] 무시해라.
( 코드 부분 )
        if distance[now] < dist:  # 최단 거리테이블 값이 더 크거나, 같은경우는 [ 무시 안한다. ]
            continue

( 예시 흐름 )
[ 현재  최단 거리테이블(distance) ] 비용 값 상태 ]                              [ 우선 순위 큐 ]
        0                 1  2   3    4      5                      6
--> [1000000000, 0,  2,  3,   1,      2,                     4     ]       [ (4,3), (4,6),(거리:5, 노드 :3) ]

위 상태에서, 우선 순위 큐에 서 값을 꺼내온게 (4,3)를 꺼냈다고 가정하자.
근데, dist = 4 , now( 현재 걸쳐가는 노드 )   = 3 상태에서 
distance[3] = 3 , dist = 4 이게 되고, 위의 [ 해당 조건문에 적용이 되어 ] 무시된다.
즉, 최단 거리테이블에 있는 [ 거리가 더 작은경우 ]는 --> ** 처리된 것이라고 판단하여 무시 **한다.

-----------------------------------------------------------------------------------------------------------------

7. 방문하지 않은 노드 중, [ 최단 거리가 짧은 ** "현재 추출한 노드의 거리 "**  ]와 ,
    추출한 노드 중 연결된 간선으로 [ 다른 노드로 가는비용 ] 을 더해준다)   
    # 현재 노드와 연결된 다른 노드를 확인
       for i in graph[now]:
            cost = dist + i[1] # 추출한 노드의 거리 + 걸쳐서 해당 노드로 가는 비용

( 예시 흐름)
[ 현재  최단 거리테이블(distance) ] 비용 값 상태 ]
        0                 1 2  3  4      5                      6
--> [1000000000, 0, 2, 5, 1, 1000000000, 1000000000]

(1). 우리는 현재 [ 4번 노드가 ] 거리가 짧은 노드로서 들고와서 [ 해당 '4'번노드에 연결된 간선정보 ]들을
      이용하여 비용을 구하고, 그 비용이 [ 현재 최단 거리테이블 비용보다 작을 경우 ] 갱신해준다.
< 4번 노드에 연결된 [ 노드 ]와 [ 간선 ]정보 >
ex) [(3, 3), (5, 1)] --> [ 4번 노드 ]에서 [ 3번노드 ]로 가는데 드는 비용 '3'이 든다.
- 즉, 현재 [ 출발 노드에서 ] [ 4번노드로 가는 비용 ]은 '1' 
       [ 4번 노드를 거쳐서 ] [ 3번 노드로 가는 비용 ] 은 '3'    -->  따라서  cost = 1 + 3 = 4라는 뜻이다. 
-----------------------------------------------------------------------------------------------------------------
8.  #[ 현재 노드를 거쳐서 ] < 다른 노드로 이동하는 거리 >가
     # 현재 [ 최단 거리테이블에 있는 거리의 비용 ]보다 [ 더 짧은 경우의 조건문 ]
     # ex) '3번 노드' 방문의 비용이 '5'인데, [ 출발 노드 ]에서 [ 4번노드를 ** 거쳐서** ] 
     # '3번 노드 방문이 [ 더 작을경우 ] ' 짧은 비용으로 갱신 시키는 과정.
            if cost < distance[i[0]]:
                distance[i[0]] = cost # 짧은 비용을 최단 거리테이블에 갱신.
                heapq.heappush(q, (cost, i[0])) # 우선 순위 큐에, ** 갱신된 (최단 거리,노드) 튜플 **을 넣어줌.
-----------------------------------------------------------------------------------------------------------------
9. 시작 노드에서 모든 노드로 가기 위한 최단 거리를 출력,
     즉, 도달할 수 있는경우 [ 노드 방문 거리] 출력, 도달할수 없을경우는 "INFINITY" 출력

# 모든 노드로 가기 위한 최단 거리를 
for i in range(1, n + 1):
    # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달할 수 있는 경우 [ 거리 ]를 출력
    else:
        print("[ 출발 노드 ]에서 "+ str([ i ]) +" 노드에 도달할수 있는 거리: " + str(distance[i]))