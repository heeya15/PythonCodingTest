"""
(실전 문제) 문자열 뒤집기 p, 313

- 다솜이는 '0과 1로만 이루어진 문자열 S를' 가지고 있습니다. 

- 다솜이는 이 문자열 S에 있는 모든 숫자를 전부 같게 만들려고 합니다.
  다솜이 할 수 있는 행동은 ' S에서 ** 연속된 하나 이상의 숫자를 잡고 ** ' [ 모두 뒤집는 것 ]입니다.

예를 들어 S = 0001100일 때는 다음과 같습니다.
  1. 전체를 뒤집으면 1110011이 된다.
  2. 4번째 문자무터 5번째 문자까지 뒤집으면 1111111이 되어서 [ 두번만에 모두 같은 숫자 ]로 만들 수 있다.

- 하지만, 처음부터 < 4, 5번째 문자를 뒤집었으면 > [ 한번에 ] 0000000이 되어서 
  [ 1번만에 모두 같은 숫자 ]로 만들 수 있습니다.

( 문제 )
- [ 문자열 S가 ]주어졌을 때, 다솜이가 해야하는 [ 행동의 최소 횟수 ]를 출력하시오.

[ 입력 조건 ]

- '첫째 줄'에 0과 1로만 이루어진 문자열 S가 주어집니다. S의 길이는 100만보다 작습니다.

[ 출력 조건 ]

- 첫째줄에 다솜이가 해야하는 [ 행동의 최소 횟수를 출력 ]합니다

( 입력 예시 )                        ( 출력 예시 )
  0001100                                 1

- 문자열이 [ 연속적인 패턴 ]을 찾음
  예로) 000 11 00
    0인 경우 1로 뒤집기 : 2개   --> 앞에 000 , 뒤에 00 을 1로 만들어서 2회
    1인 경우 0로 뒤집기 : 1개   --> 중간에 11 을 0으로 만들어서 1회
    따라서 최소 값 : 1개
    
- [ 적은 패턴의 갯수를 ] 카운트 후 반환
  
- [ 문자열 s가 연속된지 ] 알아야 함
  [ 현재 문자 ]와 [ 이전 문자가 같으면 ] ** 같은 그룹 **.  

( 아이디어 ) 
- 현재 data[i] 값과 다음 data[i+1]이 비교하여 
  서로 같지 않을때 array[i+1]의 수가 0인지 1인지에 따라 [ count 하는 변수를 다르게 설정 ]하여 조건을 걸었다.

- 마지막에는 두개의 변수 중 [ min값을 출력 ]하게 설정했다.
"""
# 책 정답 11-3.py ( p, 508 )
    
data = input()
count0 = 0 # 전부 0으로 바꾸는 경우
count1 = 0 # 전부 1로 바꾸는 경우

# [ 첫 번째 원소 ]에 대해서 처리 --> 처음에 '0으로' 바꾸는건지, '1로' 바꾸는 건지를 먼저 횟수를 센다. 
if data[0] == '1':
    count0 += 1
else:
    count1 += 1 # 첫 번째 원소가 '0'이면 증가.


# [ 두 번째 원소 ]부터 모든 원소를 확인하며
for i in range(len(data) - 1): # (0,6)
    
    if data[i] != data[i + 1]: # 현재 원소와, 다음 원소가 같지 않은경우.
        # 다음 수에서 '1로' 바뀌는 경우
        if data[i + 1] == '1':
            count0 += 1 # 전부 0으로 바꾸는 경우 횟수를 센다.
            
        # 다음 수에서 '0으로' 바뀌는 경우
        # 예를들어 4번째 원소 = 1, 5번째 원소 = 0 인경우, 
        # [ 4번째 원소 ]에서 다음 수가 0이여서 [ 1로 바꾸는 횟수 '1증가' ].
        else:
            count1 += 1 # 전부 

print("행동의 최소 횟수:" , min(count0, count1))
    