"""
(실전 문제) 곱하기 혹은 더하기 p, 312
- 각 자리가 숫자(0부터 9)로만 이루어진 [ 문자열 S가 주어졌을 때 ], 
  [ 왼쪽부터 ] 오른쪽으로 하나씩 모든 숫자를 확인하며 
  [ 숫자 사이에 ] '*' 혹은 '+' 연산자를 넣어 (곱하기, 플러스 연산자)
  결과적으로 만들어질 수 있는 [ ** 가장 큰 수를 구하는 프로그램** ]을 작성하세요. 
- 단, +보다 [ *를 먼저 계산하는 일반적인 방식과는 '달리' ], 
  < 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정 >합니다.

- 예를 들어 02984라는 문자열이 주어지면, 만들어질 수 있는 가장 큰수는 ((((0+2)*9)*8)*4) = 576 입니다.
  

[ 입력 조건 ]
- '첫째 줄'에 여러 개의 숫자로 구성된 하나의 문자열 S가 주어집니다. (1 ≤ S의 길이 ≤ 100,000)

[ 출력 조건 ]

- 첫째 줄에 만들어질 수 있는 [ 가장 큰 수를 ] 출력합니다.

( 입력 예시 )                        ( 출력 예시 )
  02984                                 576
  -----------------------------------------
  567                                   210

( 아이디어 )

- 일반적으로 특정한 두 수에 대하여 연산 수행할 때, 덧셈 보단 곱셈이 값을 더 크게 만든다.

- 두 수 중에 하나라도 '0' 혹은 '1'인 경우, 곱하기 보단 [ 더하기를 수행 ]하는 것이 효율적
  1(num)과 2(result)가 있을 경우, 1*2 = 2 , 1+2 = 3 따라서 더하기를 수행하는 것이 더 효율적.
  
"""

import time

# 책 정답 11-2.py ( p, 507 )
start = time.time()
data = input()

# [ 첫 번째 문자를 숫자로 변경 ]하여 대입
result = int(data[0])

for i in range(1, len(data)):
    # 두 수 중에서 하나라도 '0' 혹은 '1'인 경우, 곱하기보다는 더하기 수행
    num = int(data[i])
    if num <= 1 or result <= 1:
        result += num
    else:
        result *= num
        
end = time.time()       
print(result) 
print(end-start)


# (내가 푼 방법)
'''
# 문제점이 00148 을 입력시  1+4 *8 = 40이 되어야 하지만, 1*4*8 = 32가 되어서 < 틀림... >
# 즉, 최종 결과를 출력할 변수 [ sum1 = 1인 경우 ], 값을 꺼낸 값(num)이 4면 else문에 들어가서
  sum1(1) * num(4) = 4 지만,  (덧셈)을 할 경우 ' 5가 되어 더 큰 값 '이된다.
  
- 따라서, 최종 가장 큰수를 출력할 sum1이 [ 1인 경우도 ] 덧셈을 해줘야 하는 조건문으로 수정해주면 된다.
# sum1 <= 0 이 아닌 sum1 <= 1 로 수정해 주면 정상적으로 출력이 된다.
'''
from collections import deque # 큐 사용.

start = time.time()
q = deque(list(map(int,input()))) # 문자열 입력

sum1 = 0 # 최종 가장 큰수를 담을 변수 !
while q:
    num = q.popleft() # 큐에서 가장 왼쪽부터 꺼냄.
    # 숫자가 0일경우는 곱하면 0이나오고, 1을 곱하면 자기자신이 되기 때문에, 1보다 작거나 같으면 '덧셈'
    if (num <= 1) or(sum1 <= 1) :  
        sum1 += num
    else : # 그 외 숫자는 모두 곱셈.
        sum1 *=num
 
end = time.time()       
print(sum1) 
print(end-start)
