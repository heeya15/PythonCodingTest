퀵 정렬 데이터 흐름 일부분 예시)

- 앞부분 데이터 < 0 1 [2] 4 3 >

현재 피벗 = 2 (2) , left = 3 (4), right = 4 (3)  --> 괄호 안의 값은 [ 인덱스에 해당하는 '값'을 표현. ]
(1). 아래 while문에 조건에 부합하여 들어가게 된다.
      while(left <= right):

(2). 아래 while문에는 아무런 수행x --> 현재 left가 pivot보다  더 '큰' 데이터 이기 때문
        # 피벗보다 '큰' 데이터를 찾을 때까지 반복 
        while(left <= end and array[left] <= array[pivot]):
            left += 1

(3). 아래 while문은 수행됨. 
      현재 [ right 데이터가 ] pivot 보다 크기 때문.
      따라서 left = 3, right = 3 인상태.
      한번더, 아래 while문을 수행하게 됨으로써 피벗보다 '작은' 데이터를 찾음으로써 나오게됨
      left=3,  right =2 인상태
        # 피벗보다 '작은' 데이터를 찾을 때까지 반복
        # 피벗보다 [ 배열 right인덱스 값 ]이 더 크다면 아래 수행.
        while(right > start and array[right] >= array[pivot]): 
            right -= 1

(4). 현재 left가 right보다 더 큰 상태 이기때문에 아래와 같이 교체해준다.
      하지만 아무런 변화가 없는게 right 데이터와 pivot 데이터는 같은 값이기 때문에 그대로.      
        if(left > right): # 엇갈렸다면 [ 작은 ] 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
            
        else: # 엇갈리지 않았다면 [ 작은 데이터 ]와 [ 큰 데이터 ]를 교체
            array[left], array[right] = array[right], array[left]

(5). 그 후 다시 아래와 같은 재귀 함수 호출 실행.
    # [ 분할 이후 ] 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right - 1)
    

(6).  start= 2,  right -1 =1 인 상태여서 아래와 같은 조건문에 해당하기 때문에
      바로 재귀함수 호출 종료. 
     if start >= end: # 원소가 1개인 경우 종료
           return

(7). 그 다음 아래와 같은 재귀 함수 호출 실행.    right +1 = 3 , end = 4 로 인수를 넘겨줌.
   # 아래는 [ 오른쪽 부분에서 ] 정렬 수행.
    quick_sort(array, right +1, end) # 두번째 인수 right +1 or left로 두어도 된다.
------------------------------------------------------------------------------------------------------------------
(다시 아래와 같이 실행.)
현재 피벗 = 3(4) , left = 4(3), right = 4(3)  --> 괄호 안의 값은 [ 인덱스에 해당하는 '값'을 표현. ]
(1). 아래 while문에 조건에 부합하여 들어가게 된다.
      while(left <= right):

(2). 아래 while문에는 수행 --> 현재 left가 pivot보다  더 '작은' 데이터 이기 때문
        # 피벗보다 '큰' 데이터를 찾을 때까지 반복 
        while(left <= end and array[left] <= array[pivot]):
            left += 1
    따라서 left = 5, right = 4인 상태에서 while문 조건에 피벗보다 더 '큰' 데이터를 찾아 나오게 됨.
    ---> array[5]번째 인덱스 값--> '5' 여서

(3). 아래 while문은 수행x. 
      피벗 데이터가 right 데이터보다 크기 때문에 [ 조건에 부합x ]
       # 피벗보다 '작은' 데이터를 찾을 때까지 반복
       # 피벗보다 [ 배열 right인덱스 값 ]이 더 크다면 아래 수행.
       while(right > start and array[right] >= array[pivot]): 
            right -= 1

(4).  left = 5, right = 4인 상태   --> 데이터는 array[pivot] = 4 , array[right] = 3 인상태
      현재 left가 [ right보다 더 큰 상태 이기때문 ]에 아래와 같이 교체해준다.
        if(left > right): # 엇갈렸다면 [ 작은 ] 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
       
    따라서 array[pivot] = 3 , array[right] = 4
    앞 부분 정렬 수행이 다 되어서 0 1 2 3 4 5 6 9 7 8 상태이다.
    뒷 부분 정렬도 위와 같이 반복해서 수행된다.
